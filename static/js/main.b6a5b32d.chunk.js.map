{"version":3,"sources":["reducer.js","logic.js","components/Panel/index.js","components/Cell/index.js","components/Board/index.js","components/App.js","index.js"],"names":["Dispatch","React","createContext","reducer","state","action","type","board","i","cell","j","sprite","createNewBoard","n","grid","Array","fill","map","forEach","row","length","Math","round","random","rotation","rotateCell","Panel","props","dispatch","useContext","useState","boardSize","setBoardSize","className","min","max","value","onChange","e","target","onClick","parseInt","victory","isVictory","alert","Cell","join","Board","key","App","useReducer","Provider","root","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.b6a5b32d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Dispatch = React.createContext();\r\n\r\nfunction reducer(state, action) {\r\n    switch (action.type) {\r\n        case 'NEW_BOARD':\r\n            return { ...state, board: action.board };\r\n        case 'ROTATE_CELL':\r\n            const board = state.board;\r\n            const i = action.cell.i;\r\n            const j = action.cell.j;\r\n            board[i][j].sprite = action.cell.sprite;\r\n            return { ...state, board };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default Dispatch;\r\nexport { Dispatch, reducer };\r\n","function createNewBoard(n) {\r\n    let grid = Array(n).fill().map(() => (\r\n        Array(n).fill().map(() => (\r\n            { sprite: [0, 0, 0, 0] }\r\n        ))\r\n    ));\r\n\r\n    grid.forEach((row, i) => {\r\n        row.forEach((cell, j) => {\r\n            if (j < row.length - 1) {\r\n                cell.sprite[1] = Math.round(Math.random());\r\n                row[j+1].sprite[3] = cell.sprite[1];\r\n            }\r\n            if (i < grid.length - 1) {\r\n                cell.sprite[2] = Math.round(Math.random());\r\n                grid[i+1][j].sprite[0] = cell.sprite[2];\r\n            }\r\n            let rotation = Math.round(Math.random() * 3);\r\n            for (let i = 0; i < rotation; i++) {\r\n                cell.sprite = rotateCell(cell.sprite);\r\n            }\r\n            cell.i = i;\r\n            cell.j = j;\r\n        })\r\n    });\r\n\r\n    return grid;\r\n}\r\n\r\nfunction rotateCell(sprite) {\r\n    let rotated = [sprite[3], sprite[0], sprite[1], sprite[2]];\r\n    return rotated;\r\n}\r\n\r\nfunction isVictory(grid) {\r\n    let victory = true;\r\n\r\n    grid.forEach((row, i) => {\r\n        row.forEach((cell, j) => {\r\n            if (cell.sprite[0] === 1) {\r\n                if (grid[i-1] && grid[i-1][j].sprite[2] !== 1) {\r\n                    victory = false;\r\n                }\r\n            }\r\n            if (cell.sprite[2] === 1) {\r\n                if (grid[i+1] && grid[i+1][j].sprite[0] !== 1) {\r\n                    victory = false;\r\n                }\r\n            }\r\n            if (cell.sprite[1] === 1) {\r\n                if (row[j+1] && row[j+1].sprite[3] !== 1) {\r\n                    victory = false;\r\n                }\r\n            }\r\n            if (cell.sprite[3] === 1) {\r\n                if (row[j-1] && row[j-1].sprite[1] !== 1) {\r\n                    victory = false;\r\n                }\r\n            }\r\n        })\r\n    });\r\n\r\n    return victory;\r\n}\r\n\r\nexport { createNewBoard, rotateCell, isVictory };\r\n","import React, { useState, useContext } from 'react';\r\nimport './index.css';\r\nimport Dispatch from '../../reducer';\r\nimport { createNewBoard, isVictory } from '../../logic';\r\n\r\nexport default function Panel(props) {\r\n    const dispatch = useContext(Dispatch);\r\n    const [boardSize, setBoardSize] = useState('10');\r\n\r\n    function newBoard() {\r\n        dispatch({\r\n            type: 'NEW_BOARD',\r\n            board: createNewBoard(parseInt(boardSize)),\r\n        })\r\n    }\r\n\r\n    function checkVictory() {\r\n        if (isVictory(props.grid)) {\r\n            alert('Victory');\r\n        } else {\r\n            alert('Not yet');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='panel'>\r\n                <input\r\n                    type='number'\r\n                    min='3'\r\n                    max='30'\r\n                    value={boardSize}\r\n                    onChange={e => setBoardSize(e.target.value)} />\r\n                <button onClick={newBoard}>Create new board</button>\r\n            </div>\r\n            <button onClick={checkVictory}>Check victory</button>\r\n        </>\r\n    );\r\n}\r\n","import React, { useContext } from 'react';\r\nimport './index.css';\r\nimport { rotateCell } from '../../logic';\r\nimport Dispatch from '../../reducer';\r\n\r\nexport default function Cell(props) {\r\n    const dispatch = useContext(Dispatch);\r\n\r\n    function handleClick() {\r\n        dispatch({\r\n            type: 'ROTATE_CELL',\r\n            cell: { i: props.i, j: props.j, sprite: rotateCell(props.sprite) },\r\n        });\r\n    }\r\n\r\n    return (\r\n        <button\r\n            className={`cell s-${props.sprite.join('')}`}\r\n            onClick={handleClick}\r\n        ></button>\r\n    );\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport './index.css';\r\nimport Cell from '../Cell';\r\n\r\nexport default function Board({ grid }) {\r\n    return (\r\n        <div className='board'>\r\n            {grid.map((row, i) => (\r\n                <div className='row' key={i}>\r\n                    {row.map((cell, j) => (\r\n                        <Cell key={j} {...cell} />\r\n                    ))}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n","import React, { useReducer } from 'react';\nimport Panel from './Panel';\nimport Board from './Board';\nimport { createNewBoard } from '../logic';\nimport { Dispatch, reducer } from '../reducer';\n\nfunction App() {\n    const [state, dispatch] = useReducer(reducer, { board: createNewBoard(10) });\n\n    return (\n        <Dispatch.Provider value={dispatch}>\n            <Panel grid={state.board} />\n            <Board grid={state.board} />\n        </Dispatch.Provider>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nconst root = document.getElementById('root');\nroot.className = 'col a-center';\n\nReactDOM.render(<App />, root);\n"],"sourceRoot":""}